class Point:
    """ Create a new Point, at coordinates x, y """

    def __init__(self, x=0, y=0):
        """ Create a new point at x, y """
        self.x = x
        self.y = y

    def distance_from_origin(self):
        """ Compute my distance from the origin """
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5

    def print_point(pt):
        print("({0}, {1})".format(pt.x, pt.y))

    def __str__(self):    # All we have done is renamed the method
        return "({0}, {1})".format(self.x, self.y)

    def halfway(self, target):
        """ Return the halfway point between myself and the target """
        mx = (self.x + target.x)/2
        my = (self.y + target.y)/2
        return Point(mx, my)

    def reflect_x(self):
        """ Reflect the point in the x axis"""
        return ((self.x, -(self.y)))

    def slope_from_origin(self):
        """ Finds the gradient of a line from the origin"""
        return (float(self.y/self.x))

def equation(gradient,x1,y1):
    if x1<0 and y1<0:
        return ("y+{0} = {1}(x{2})".format(gradient,x1,y1))
    if x1<0 and y1>0:
        return ("y-{0} = {1}(x+{2})".format(gradient,x1,y1))
    if x1>0 and y1<0:
        return ("y+{0} = {1}(x-{2})".format(gradient,x1,y1))
    if x1>0 and y1>0:
        return ("y-{0} = {1}(x-{2})".format(gradient,x1,y1))
    if x1==0 and y1>0:
        return ("y-{0} = {1}(x)".format(gradient,y1))
    if x1==0 and y1<0:
        return ("y+{0} = {1}(x)".format(gradient,y1))
    if x1>0 and y1==0:
        return ("y = {0}(x-{1})".format(gradient,x1))
    if x1<0 and y1==0:
        return ("y = {0}(x-{1})".format(gradient,x1))
    if x1==0 and y1==0:
        return ("y = {0}(x)".format(gradient))

a=Point(2,3)
c=Point(0,0)
b=Point(3,-2)
d=Point(5,0)

def centre_circle_finder(a,b,c,d):
    p=a.halfway(b)
    q=c.halfway(d)
    gradient_of_twopoints=(b.y-a.y)/(b.x-a.x)
    gradient_of_nexttwopoints=(c.y-d.y)/(c.x-d.x)
    normal_of_gradient1=(-1/gradient_of_twopoints)
    normal_of_gradient2=(-1/gradient_of_nexttwopoints)
    vv=equation(normal_of_gradient1,p.x,p.y)
    vvv=equation(normal_of_gradient2,q.x,q.y)
    print(vvv)
    print(vv)
    o=(q.x)*(normal_of_gradient2)
    oo=o-(q.y)
    i=(p.x)*(normal_of_gradient1)
    ii=i-(p.y)
    ee=oo-ii
    totalx=normal_of_gradient1-normal_of_gradient2
    thex=ee/totalx
    print(thex)
    y=(normal_of_gradient1*thex)+(normal_of_gradient1*p.x)-p.y
    print(y)


centre_circle_finder(a,b,c,d)

