import turtle
wn = turtle.Screen()    
t = turtle.Turtle()

def koch(t, order, size):
    if order == 0:
        t.forward(size)
    else:
        for angle in [60, -120, 60, 0]:
           koch(t, order-1, size/3)
           t.left(angle)


#Exercises

def koch_snowflake(t, order, size):
    """
       Make turtle t draw a Koch fractal of 'order' and 'size'.
       Leave the turtle facing the same direction.
    """

    if order == 0:          # The base case is just a straight line
        t.forward(size)
    else:
        for angle in [60, -120, 60, -120, 60, -120, 60,-120,60,-120,60,-120]:
           koch(t, order-1, size/3)
           t.left(angle)

def cesaro_fractal(t, order, angletear, size):
    if order==0:
        t.forward(size)
    else:
        for angle in [-((180-angletear)/2),(180-angletear),-((180-angletear)/2),0]:
            cesaro_fractal(t, order-1, angletear, size/3)
            t.left(angle)

def cesaro_square(t, order, angletear, size):
    if order==0:
        for i in range(4):
            t.forward(size)
            t.right(90)
    else:
        for i in range(4):
            if order==0:
                t.forward(size)
            else:
                for angle in [-((180-angletear)/2),(180-angletear),-((180-angletear)/2),-90]:
                    cesaro_fractal(t, order-1, angletear, size/3)
                    t.left(angle)


def sierpinski_triangle(t, order, size):
    if order==0:
        for angle in [120, 120, 120,0]:
            t.forward(size)
            t.left(angle)
    else:
        sierpinski_triangle(t, order-1, size/2)   # Go 1/3 of the way
        t.left(0)
        sierpinski_triangle(t, order-1, size/2)
        t.left(0)
        sierpinski_triangle(t, order-1, size/2)
        t.left(0)
        sierpinski_triangle(t, order-1, size/2)

        
def recursive_min(nxs):
    """
      Find the minimum in a recursive structure of lists
      within other lists.
      Precondition: No lists or sublists are empty.
    """
    smallest = None
    first_time = True
    for e in nxs:
        if type(e) == type([]):
            val = recursive_min(e)
        else:
            val = e

        if first_time or val < smallest:
            smallest = val
            first_time = False

    return smallest

u=recursive_min([2, 9, [1, 13], 8, 6])
print(u)


def count(target, n_list):
    sumz=0
    for element in n_list:
        if type(element)==type([]):
            rar=count(target, element)
            sumz=sumz+rar
        else:
            if element==target:
                sumz=sumz+1
    return sumz

x=count(2, [2, 9, [2, 1, 13, 2], 8, [2, 6]])
print(x)

def flatten(n_list):
    listy=[]
    for element in n_list:
        if type(element)==type([]):
            var=flatten(element)
            listy.append(var)
        else:
            d=", ".join(repr(e) for e in listy )
            listy.append(d)
    return listy
                
#def fibonacci(

#def fibonacci_term(

c=flatten([2, 9, [2, 1, 13, 2], 8, [2, 6]])
print(c)
