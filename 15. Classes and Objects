class Point:
    """ Create a new Point, at coordinates x, y """

    def __init__(self, x=0, y=0):
        """ Create a new point at x, y """
        self.x = x
        self.y = y

    def distance_from_origin(self):
        """ Compute my distance from the origin """
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5
   
    def print_point(pt):
        print("({0}, {1})".format(pt.x, pt.y))
       
    def __str__(self):    # All we have done is renamed the method
        return "({0}, {1})".format(self.x, self.y)
            
    def halfway(self, target):
        """ Return the halfway point between myself and the target """
        mx = (self.x + target.x)/2
        my = (self.y + target.y)/2
        return Point(mx, my)

    def reflect_x(self):
        """ Reflect the point in the x axis"""
        return ((self.x, -(self.y)))

    def slope_from_origin(self):
        """ Finds the gradient of a line from the origin"""
        return (float(self.y/self.x))

p = Point()         # Instantiate an object of type Point
q = Point()         # Make a second point
p = Point(3, 4)
q = Point(5, 12)
print(p.x, p.y, q.x, q.y)  # Each point object has its own x and y

print("(x={0}, y={1})".format(p.x, p.y))
distance_from_origin = p.x * p.x + p.y * p.y
str(p)
r = p.halfway(q)
reflect_x=("(x={0}, y={1})".format(p.x, -(p.y)))
print(p.reflect_x())
print(q.slope_from_origin())
w,h=4,100
lis=[[0 for x in range(4)]for y in range(h)]
class SMS_store:
    """Create a new class"""

    def __init__(self, has_been_viewed=False, from_number=0, time_arrived=0, text_of_SMS=0, c=0, x=0):
        """"""
        self.has_been_viewed=has_been_viewed
        self.from_number=from_number
        self.time_arrived=time_arrived
        self.text_of_SMS=text_of_SMS
        self.c=0
        self.x=0

    def add_new_arrival(self, from_number, time_arrived, text_of_SMS, has_been_viewed):
        fn=from_number
        ta=time_arrived
        tSmS=text_of_SMS
        viewed=has_been_viewed
        self.c+=1
        lis[self.c][0]=fn
        lis[self.c][1]=ta
        lis[self.c][2]=tSmS
        lis[self.c][3]=viewed
        return lis[self.c-1]

    def message_count(self):
        return(self.c)

    def get_unread_indexes(self):
        for i in range(100):
            if lis[i][3]==("Viewed=False"):
                print(i,",","3")

    def get_message(self, x):
        viewed2="True"
        lis[x][3]=viewed2
        return lis[x]
        
        
    def delete(self, x):
        lis[x][0]=0
        lis[x][1]=0
        lis[x][2]=0
        lis[x][3]=0

    def clear(self):
        for i in range(100):
            lis[i][0]=0
            lis[i][1]=0
            lis[i][2]=0
            lis[i][3]=0

my_inbox=SMS_store()
my_inbox.add_new_arrival("0122138329", "12:45", "Ok here you go","Viewed=False")
print(lis)
v=my_inbox.message_count()
print(v)
x=my_inbox.get_message(0)
print(x)
my_inbox.add_new_arrival("0122138329", "12:45", "Ok here you go","Viewed=False")
print(lis)
my_inbox.get_unread_indexes()
x=my_inbox.get_message(1)
print(x)
my_inbox.clear()
print(lis)
x=my_inbox.get_message(4)
print(x)
